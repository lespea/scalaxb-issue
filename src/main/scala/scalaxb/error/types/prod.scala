// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package scalaxb.error.types

/**
 * This is the XML schema for the Common Vulnerability Reporting Framework's Product model.  For more information, see the CVRF whitepaper.
 */

trait BranchTypeEnumType

object BranchTypeEnumType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): BranchTypeEnumType = value match {
    case "Vendor"          ⇒ VendorValue
    case "Product Family"  ⇒ ProductFamily
    case "Product Name"    ⇒ ProductName
    case "Product Version" ⇒ ProductVersion
    case "Patch Level"     ⇒ PatchLevel
    case "Service Pack"    ⇒ ServicePack
    case "Architecture"    ⇒ Architecture
    case "Language"        ⇒ Language
    case "Legacy"          ⇒ Legacy
    case "Specification"   ⇒ Specification
    case "Host Name"       ⇒ HostName
    case "Realm"           ⇒ Realm
    case "Resource"        ⇒ Resource

  }
}

case object VendorValue extends BranchTypeEnumType { override def toString = "Vendor" }
case object ProductFamily extends BranchTypeEnumType { override def toString = "Product Family" }
case object ProductName extends BranchTypeEnumType { override def toString = "Product Name" }
case object ProductVersion extends BranchTypeEnumType { override def toString = "Product Version" }
case object PatchLevel extends BranchTypeEnumType { override def toString = "Patch Level" }
case object ServicePack extends BranchTypeEnumType { override def toString = "Service Pack" }
case object Architecture extends BranchTypeEnumType { override def toString = "Architecture" }
case object Language extends BranchTypeEnumType { override def toString = "Language" }
case object Legacy extends BranchTypeEnumType { override def toString = "Legacy" }
case object Specification extends BranchTypeEnumType { override def toString = "Specification" }
case object HostName extends BranchTypeEnumType { override def toString = "Host Name" }
case object Realm extends BranchTypeEnumType { override def toString = "Realm" }
case object Resource extends BranchTypeEnumType { override def toString = "Resource" }

trait RelationTypeEnumType

object RelationTypeEnumType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RelationTypeEnumType = value match {
    case "Default Component Of"  ⇒ DefaultComponentOf
    case "Optional Component Of" ⇒ OptionalComponentOf
    case "External Component Of" ⇒ ExternalComponentOf
    case "Installed On"          ⇒ InstalledOn
    case "Installed With"        ⇒ InstalledWith

  }
}

case object DefaultComponentOf extends RelationTypeEnumType { override def toString = "Default Component Of" }
case object OptionalComponentOf extends RelationTypeEnumType { override def toString = "Optional Component Of" }
case object ExternalComponentOf extends RelationTypeEnumType { override def toString = "External Component Of" }
case object InstalledOn extends RelationTypeEnumType { override def toString = "Installed On" }
case object InstalledWith extends RelationTypeEnumType { override def toString = "Installed With" }

case class BranchType(branchtypeoption: Seq[scalaxb.DataRecord[scalaxb.error.types.BranchTypeOption]] = Nil,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BranchTypeOption {
  lazy val Type = attributes("@Type").as[BranchTypeEnumType]
  lazy val Name = attributes("@Name").as[String]
}

trait BranchTypeOption

case class Relationship(FullProductName: Seq[scalaxb.error.types.FullProductName] = Nil,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val ProductReference = attributes("@ProductReference").as[String]
  lazy val RelationType = attributes("@RelationType").as[RelationTypeEnumType]
  lazy val RelatesToProductReference = attributes("@RelatesToProductReference").as[String]
}

case class Description4(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
}

case class Group(Description: Option[scalaxb.error.types.Description4] = None,
    ProductID: Seq[String] = Nil,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val GroupID = attributes("@GroupID").as[String]
}

case class ProductGroups(Group: scalaxb.error.types.Group*)

case class ProductTree(Branch: Seq[scalaxb.error.types.BranchType] = Nil,
  FullProductName: Seq[scalaxb.error.types.FullProductName] = Nil,
  Relationship: Seq[scalaxb.error.types.Relationship] = Nil,
  ProductGroups: Option[scalaxb.error.types.ProductGroups] = None)

case class FullProductName(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BranchTypeOption {
  lazy val ProductID = attributes("@ProductID").as[String]
  lazy val CPE = attributes.get("@CPE") map { _.as[java.net.URI] }
}

