// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package scalaxb.error.types

/**
 * This XML Schema defines the CPE Language. An individual
 * CPE Name addresses a single part of an actual system. To identify more complex
 * platform types, there needs to be a way to combine different CPE Names using
 * logical operators. For example, there may be a need to identify a platform with a
 * particular operating system AND a certain application. The CPE Language exists to
 * satisfy this need, enabling the CPE Name for the operating system to be combined
 * with the CPE Name for the application. For more information, consult the CPE
 * Specification document.
 */

case class PlatformSpecificationType(platform: scalaxb.error.types.PlatformType*)

/**
 * The platform element represents the description
 * or qualifications of a particular IT platform type. The platform is defined
 * by the logical-test child element.
 */
trait PlatformBaseTypable {
  val title: Seq[scalaxb.error.types.TextType]
  val remark: Seq[scalaxb.error.types.TextType]
  val logicalu45test: scalaxb.error.types.LogicalTestType
}

/**
 * The platform element represents the description
 * or qualifications of a particular IT platform type. The platform is defined
 * by the logical-test child element.
 */
case class PlatformBaseType(title: Seq[scalaxb.error.types.TextType] = Nil,
  remark: Seq[scalaxb.error.types.TextType] = Nil,
  logicalu45test: scalaxb.error.types.LogicalTestType) extends PlatformBaseTypable

case class PlatformType(title: Seq[scalaxb.error.types.TextType] = Nil,
    remark: Seq[scalaxb.error.types.TextType] = Nil,
    logicalu45test: scalaxb.error.types.LogicalTestType,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends PlatformBaseTypable {
  lazy val id = attributes("@id").as[java.net.URI]
}

/**
 * The logical-test element appears as a child of a
 * platform element, and may also be nested to create more complex logical
 * tests. The content consists of one or more elements: fact-ref, and
 * logical-test children are permitted. The operator to be applied, and
 * optional negation of the test, are given as attributes.
 */
case class LogicalTestType(logicalu45test: Seq[scalaxb.error.types.LogicalTestType] = Nil,
    factu45ref: Seq[scalaxb.error.types.FactRefType] = Nil,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val operator = attributes("@operator").as[OperatorEnumeration]
  lazy val negate = attributes("@negate").as[Boolean]
}

/**
 * The fact-ref element appears as a
 * child of a logical-test element. It is simply a reference to a CPE Name that
 * always evaluates to a Boolean result.
 */
case class FactRefType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val name = attributes("@name").as[java.net.URI]
}

trait OperatorEnumeration

object OperatorEnumeration {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): OperatorEnumeration = value match {
    case "AND" ⇒ AND
    case "OR"  ⇒ OR

  }
}

case object AND extends OperatorEnumeration { override def toString = "AND" }
case object OR extends OperatorEnumeration { override def toString = "OR" }

/**
 * This type allows the xml:lang attribute to
 * associate a specific language with an element's string
 * content.
 */
case class TextType(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String] }
}

