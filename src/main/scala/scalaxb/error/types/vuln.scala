// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package scalaxb.error.types

/**
 * This is the XML schema for the Common Vulnerability Reporting Framework's Vulnerability model.  For more information, see the CVRF whitepaper.
 */

trait InvolvementStatusEnumType

object InvolvementStatusEnumType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): InvolvementStatusEnumType = value match {
    case "Open"              ⇒ Open
    case "Disputed"          ⇒ Disputed
    case "In Progress"       ⇒ InProgress
    case "Completed"         ⇒ Completed
    case "Contact Attempted" ⇒ ContactAttempted
    case "Not Contacted"     ⇒ NotContacted

  }
}

case object Open extends InvolvementStatusEnumType { override def toString = "Open" }
case object Disputed extends InvolvementStatusEnumType { override def toString = "Disputed" }
case object InProgress extends InvolvementStatusEnumType { override def toString = "In Progress" }
case object Completed extends InvolvementStatusEnumType { override def toString = "Completed" }
case object ContactAttempted extends InvolvementStatusEnumType { override def toString = "Contact Attempted" }
case object NotContacted extends InvolvementStatusEnumType { override def toString = "Not Contacted" }

trait AffectedStatusEnumType

object AffectedStatusEnumType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): AffectedStatusEnumType = value match {
    case "First Affected"     ⇒ FirstAffected
    case "First Fixed"        ⇒ FirstFixed
    case "Fixed"              ⇒ Fixed
    case "Known Affected"     ⇒ KnownAffected
    case "Known Not Affected" ⇒ KnownNotAffected
    case "Last Affected"      ⇒ LastAffected
    case "Recommended"        ⇒ Recommended

  }
}

case object FirstAffected extends AffectedStatusEnumType { override def toString = "First Affected" }
case object FirstFixed extends AffectedStatusEnumType { override def toString = "First Fixed" }
case object Fixed extends AffectedStatusEnumType { override def toString = "Fixed" }
case object KnownAffected extends AffectedStatusEnumType { override def toString = "Known Affected" }
case object KnownNotAffected extends AffectedStatusEnumType { override def toString = "Known Not Affected" }
case object LastAffected extends AffectedStatusEnumType { override def toString = "Last Affected" }
case object Recommended extends AffectedStatusEnumType { override def toString = "Recommended" }

trait ThreatTypeEnumType

object ThreatTypeEnumType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ThreatTypeEnumType = value match {
    case "Impact"         ⇒ Impact
    case "Exploit Status" ⇒ ExploitStatus
    case "Target Set"     ⇒ TargetSet

  }
}

case object Impact extends ThreatTypeEnumType { override def toString = "Impact" }
case object ExploitStatus extends ThreatTypeEnumType { override def toString = "Exploit Status" }
case object TargetSet extends ThreatTypeEnumType { override def toString = "Target Set" }

trait RemedyTypeEnumType

object RemedyTypeEnumType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RemedyTypeEnumType = value match {
    case "Workaround"     ⇒ WorkaroundValue
    case "Mitigation"     ⇒ Mitigation
    case "Vendor Fix"     ⇒ VendorFix
    case "None Available" ⇒ NoneAvailable
    case "Will Not Fix"   ⇒ WillNotFix

  }
}

case object WorkaroundValue extends RemedyTypeEnumType { override def toString = "Workaround" }
case object Mitigation extends RemedyTypeEnumType { override def toString = "Mitigation" }
case object VendorFix extends RemedyTypeEnumType { override def toString = "Vendor Fix" }
case object NoneAvailable extends RemedyTypeEnumType { override def toString = "None Available" }
case object WillNotFix extends RemedyTypeEnumType { override def toString = "Will Not Fix" }

case class Title(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
}

case class ID2(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val SystemName = attributes("@SystemName").as[String]
}

case class Note2(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
  lazy val Title = attributes.get("@Title") map { _.as[String] }
  lazy val Audience = attributes.get("@Audience") map { _.as[String] }
  lazy val Type = attributes("@Type").as[NoteTypeEnumType]
  lazy val Ordinal = attributes("@Ordinal").as[BigInt]
}

case class Notes(Note: scalaxb.error.types.Note2*)

case class Description5(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
}

case class Involvement(Description: Option[scalaxb.error.types.Description5] = None,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val Party = attributes("@Party").as[PublisherEnumType]
  lazy val Status = attributes("@Status").as[InvolvementStatusEnumType]
}

case class Involvements(Involvement: scalaxb.error.types.Involvement*)

case class CWE(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
  lazy val ID = attributes("@ID").as[String]
}

case class Status(ProductID: Seq[String] = Nil,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val Type = attributes("@Type").as[AffectedStatusEnumType]
}

case class ProductStatuses(Status: scalaxb.error.types.Status*)

case class Description6(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
}

case class Threat(Description: scalaxb.error.types.Description6,
    ProductID: Seq[String] = Nil,
    GroupID: Seq[String] = Nil,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val Type = attributes("@Type").as[ThreatTypeEnumType]
  lazy val Date = attributes.get("@Date") map { _.as[javax.xml.datatype.XMLGregorianCalendar] }
}

case class Threats(Threat: scalaxb.error.types.Threat*)

case class ScoreSet(BaseScore: BigDecimal,
  TemporalScore: Option[BigDecimal] = None,
  EnvironmentalScore: Option[BigDecimal] = None,
  Vector: Option[String] = None,
  ProductID: Seq[String] = Nil)

case class CVSSScoreSets(ScoreSet: scalaxb.error.types.ScoreSet*)

case class Description7(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
}

case class Entitlement(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
}

case class Remediation(Description: scalaxb.error.types.Description7,
    Entitlement: Seq[scalaxb.error.types.Entitlement] = Nil,
    URL: Option[java.net.URI] = None,
    ProductID: Seq[String] = Nil,
    GroupID: Seq[String] = Nil,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val Type = attributes("@Type").as[RemedyTypeEnumType]
  lazy val Date = attributes.get("@Date") map { _.as[javax.xml.datatype.XMLGregorianCalendar] }
}

case class Remediations(Remediation: scalaxb.error.types.Remediation*)

case class Description8(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
}

case class Reference2(URL: java.net.URI,
    Description: scalaxb.error.types.Description8,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val Type = attributes("@Type").as[ReferenceTypeEnum]
}

case class References(Reference: scalaxb.error.types.Reference2*)

case class Name2(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
}

case class Organization2(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
}

case class Description9(value: String,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocalizedStringable {
  lazy val xmllang = attributes("@{http://www.w3.org/XML/1998/namespace}lang").as[String]
}

case class Acknowledgment2(Name: Seq[scalaxb.error.types.Name2] = Nil,
  Organization: Seq[scalaxb.error.types.Organization2] = Nil,
  Description: Option[scalaxb.error.types.Description9] = None,
  URL: Seq[java.net.URI] = Nil)

case class Acknowledgments2(Acknowledgment: scalaxb.error.types.Acknowledgment2*)

case class Vulnerability(Title: Option[scalaxb.error.types.Title] = None,
    ID: Option[scalaxb.error.types.ID2] = None,
    Notes: Option[scalaxb.error.types.Notes] = None,
    DiscoveryDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
    ReleaseDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
    Involvements: Option[scalaxb.error.types.Involvements] = None,
    CVE: Option[String] = None,
    CWE: Seq[scalaxb.error.types.CWE] = Nil,
    ProductStatuses: Option[scalaxb.error.types.ProductStatuses] = None,
    Threats: Option[scalaxb.error.types.Threats] = None,
    CVSSScoreSets: Option[scalaxb.error.types.CVSSScoreSets] = None,
    Remediations: Option[scalaxb.error.types.Remediations] = None,
    References: Option[scalaxb.error.types.References] = None,
    Acknowledgments: Option[scalaxb.error.types.Acknowledgments2] = None,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val Ordinal = attributes("@Ordinal").as[BigInt]
}

