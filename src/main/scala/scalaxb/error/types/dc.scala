// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package scalaxb.error.types

/**
 * DCMES 1.1 XML Schema
 * XML Schema for http://purl.org/dc/elements/1.1/ namespace
 *
 * Created 2003-04-02
 *
 * Created by
 *
 * Tim Cole (t-cole3@uiuc.edu)
 * Tom Habing (thabing@uiuc.edu)
 * Jane Hunter (jane@dstc.edu.au)
 * Pete Johnston (p.johnston@ukoln.ac.uk),
 * Carl Lagoze (lagoze@cs.cornell.edu)
 *
 * This schema declares XML elements for the 15 DC elements from the
 * http://purl.org/dc/elements/1.1/ namespace.
 *
 * It defines a complexType SimpleLiteral which permits mixed content
 * and makes the xml:lang attribute available. It disallows child elements by
 * use of minOcccurs/maxOccurs.
 *
 * However, this complexType does permit the derivation of other complexTypes
 * which would permit child elements.
 *
 * All elements are declared as substitutable for the abstract element any,
 * which means that the default type for all elements is dc:SimpleLiteral.
 *
 *
 */

/**
 * This is the default type for all of the DC elements.
 * It permits text content only with optional
 * xml:lang attribute.
 * Text is allowed because mixed="true", but sub-elements
 * are disallowed because minOccurs="0" and maxOccurs="0"
 * are on the xs:any tag.
 *
 * This complexType allows for restriction or extension permitting
 * child elements.
 *
 */
case class SimpleLiteral(any: Option[scalaxb.DataRecord[Any]] = None,
    attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends ElementsGroupOption1 {
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String] }
}

/**
 * This complexType is included as a convenience for schema authors who need to define a root
 * or container element for all of the DC elements.
 *
 */
case class ElementContainer(elementcontaineroption: scalaxb.DataRecord[Any]*)

trait ElementContainerOption
trait ElementsGroupOption1
